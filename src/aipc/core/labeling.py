# aipc/core/labeling.py

import os
import base64
import logging
import requests
import threading
from time import sleep
from pathlib import Path
from typing import Optional

from ..utils import BaseClass
from ..utils.constants import OLLAMA_PORT, OLLAMA_MODEL, IMAGE_EXTENSIONS


class LLaVA(BaseClass):
    """
    Handles image labeling using the Ollama server with LLaVA model
    """
    def __init__(
            self,
            logger: Optional[logging.Logger] = None
        ) -> None:
        """
        Initializes the Labeling class with folder paths.
        """
        super().__init__(logger)

        self.image_folder: Path = None
        self.output_folder: Path = None
        self.ollama_url = f"http://localhost:{OLLAMA_PORT}/api/generate"
        self.server_thread = None

        self._start_ollama_server()

    def _start_ollama_server(self):
        """
        Starts the Ollama server in a background thread if it's not already running.
        """
        def server_task():
            self.info("Starting Ollama server...")
            os.system("ollama serve")

        if not self._is_ollama_running():
            self.info("Ollama server is not running. Starting now...")
            self.server_thread = threading.Thread(target=server_task, daemon=True)
            self.server_thread.start()
            sleep(3)

        else:
            self.info("Ollama server is already running.")

    def _is_ollama_running(self) -> bool:
        """
        Checks if the Ollama server is running.\n
        ---
        ### Returns
        - `bool`: `True` if the server is running, `False` otherwise.
        """
        try:
            response = requests.get(f"http://localhost:{OLLAMA_PORT}/health")
            return response.status_code == 200

        except requests.exceptions.ConnectionError:
            return False

    def encode_image(
            self,
            image_path: str
        ) -> str:
        """
        Encodes an image to a Base64 string.\n
        ---
        ### Args
        - `image_path` (`str`): path to the image file.\n
        ---
        ### Returns
        - `str`: Base64-encoded string of the image.
        """
        with open(image_path, "rb") as image_file:
            return base64.b64encode(image_file.read()).decode("utf-8")

    def generate_caption(
            self,
            image_base64: str
        ) -> str:
        """
        Sends an image to the LLaVA model running on Ollama to generate a caption.\n
        ---
        ### Args
        - `image_base64` (`str`): Base64-encoded image.\n
        ---
        ### Returns
        - `str`: caption generated by the model.
        """
        payload = {
            "model": OLLAMA_MODEL,
            "image": image_base64,
            "prompt": "Describe the image:"
        }
        headers = {"Content-Type": "application/json"}

        try:
            response = requests.post(self.ollama_url, json=payload, headers=headers)
            response.raise_for_status()

            data: dict = response.json()
            return data.get("caption", "No caption generated")

        except requests.exceptions.RequestException as e:
            self.error(f"Error connecting to Ollama: {e}")
            raise Exception(f"Error connecting to Ollama: {e}")

    def save_caption(
            self,
            image_path: str,
            caption: str):
        """
        Saves the generated caption to a text file.\n
        ---
        ### Args
        - `image_path` (`str`): path to the original image.
        - `caption` (`str`): caption text.
        """
        os.makedirs(self.output_folder, exist_ok=True)

        base_name = os.path.splitext(os.path.basename(image_path))[0]
        output_path = os.path.join(self.output_folder, f"{base_name}_caption.txt")

        with open(output_path, "w") as file:
            file.write(caption)

        self.info(f"Caption saved to: {output_path}")

    def process_images(
            self,
            image_folder: Path
        ) -> None:
        """
        Processes all images in the folder, generating and saving captions.\n
        ---
        ### Args
        - `image_folder` (`str`): folder containing images to process.
        - `output_folder` (`str`): folder where captions will be saved.
        """
        if not os.path.exists(image_folder):
            self.error(f"Image folder '{image_folder}' does not exist.")
            return

        images = [
            os.path.join(image_folder, f)
            for f in os.listdir(image_folder)
            if f.lower().endswith(IMAGE_EXTENSIONS)
        ]

        if not images:
            self.warning("No images found in the folder.")
            return

        for image_path in images:
            try:
                self.info(f"Processing: {image_path}")
                image_base64 = self.encode_image(image_path)
                caption = self.generate_caption(image_base64)
                self.save_caption(image_path, caption)

            except Exception as e:
                self.error(f"Error processing {image_path}: {e}")
