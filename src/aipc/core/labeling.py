# aipc/core/labeling.py

import os
import base64
import logging
import threading
from pathlib import Path
from PIL import Image, ExifTags
from typing import Optional, Dict

import ollama

from ..utils import BaseClass
from ..retrieval import QdrantDB
from ..utils.constants import OLLAMA_PORT, OLLAMA_MODEL, IMAGE_EXTENSIONS


class VisionModel(BaseClass):
    """
    Handles image labeling using the Ollama server with LLaVA model
    """
    def __init__(
            self,
            logger: Optional[logging.Logger] = None
        ) -> None:
        """
        Initializes the Labeling class with folder paths.
        """
        super().__init__(logger)
        self.qdrant_db = QdrantDB()
        self.ollama_url = f"http://localhost:{OLLAMA_PORT}/api/generate"
        self.server_thread = threading.Thread(target=self._start_ollama_server, daemon=True)
        self.server_thread.start()

    def _start_ollama_server(self) -> None:
        """
        Starts the Ollama server. Assumes no checks are necessary.
        """
        try:
            self.info("Starting Ollama server...")
            os.system("ollama serve")
        except Exception as e:
            self.error(f"Failed to start Ollama server: {e}")
            raise

    def encode_image(
            self,
            image_path: Path
        ) -> str:
        """
        Encodes an image to a Base64 string.\n
        ---
        ### Args
        - `image_path` (`Path`): path to the image file.\n
        ---
        ### Returns
        - `str`: Base64-encoded string of the image.
        """
        try:
            with open(image_path, "rb") as image_file:
                return base64.b64encode(image_file.read()).decode("utf-8")

        except Exception as e:
            self.error(f"Error encoding image {image_path}: {e}")
            raise

    def extract_exif_data(
            self,
            image_path: Path
        ) -> Dict[str, str]:
        """
        Extracts EXIF metadata from an image.\n
        ---
        ### Args
        - `image_path` (`Path`): path to the image file.\n
        ---
        ### Returns
        - `Dict[str, str]`: dictionary containing EXIF metadata (if present).
        """
        try:
            with Image.open(image_path) as img:
                exif_data = img._getexif()
                if not exif_data:
                    return {}

                return {
                    ExifTags.TAGS.get(tag, tag): value
                    for tag, value in exif_data.items()
                    if tag in ExifTags.TAGS
                }
        except Exception as e:
            self.warning(f"Error extracting EXIF data for {image_path}: {e}")
            return {}

    def generate_caption(
            self,
            image_base64: str,
            exif_data: Optional[Dict[str, str]] = None
        ) -> str:
        """
        Sends an image to the LLaVA model running on Ollama to generate a caption.\n
        ---
        ### Args
        - `image_base64` (`str`): Base64-encoded image.
        - `exif_data` (`Optional[Dict[str, str]]`): optional EXIF metadata to provide context for captioning.\n
        ---
        ### Returns
        - `str`: caption generated by the model.
        """
        try:
            prompt = "Describe the image."
            if exif_data:
                exif_description = "\n".join(f"{key}: {value}" for key, value in exif_data.items())
                prompt += f" The following metadata may help: {exif_description}"

            response = ollama.chat(
                model = OLLAMA_MODEL,
                messages = [
                    {
                        'role': 'user',
                        'content': prompt,
                        'images': [image_base64]
                    }
                ])
            return response.message.content

        except Exception as e:
            self.error(f"Error generating caption: {e}")
            raise

    def save_caption(
            self,
            image_path: Path,
            caption: str
        ) -> None:
        """
        Saves the generated caption to a text file.\n
        ---
        ### Args
        - `image_path` (`Path`): path to the original image.
        - `caption` (`str`): caption text.
        """
        try:
            output_folder = image_path.parent / "captions"
            output_folder.mkdir(parents=True, exist_ok=True)

            base_name = image_path.stem
            output_path = output_folder / f"{base_name}_caption.txt"

            with open(output_path, "w") as file:
                file.write(caption)
            self.info(f"Caption saved to: {output_path}")

        except Exception as e:
            self.error(f"Error saving caption for {image_path}: {e}")
            raise

    def process_images(
            self,
            image_folder: Path
        ) -> None:
        """
        Processes all images in the folder, generating and saving captions.\n
        ---
        ### Args
        - `image_folder` (`Path`): folder containing images to process.
        """
        try:
            if not image_folder.exists():
                self.error(f"Image folder '{image_folder}' does not exist.")
                return

            images = [img for img in image_folder.iterdir() if img.suffix.lower() in IMAGE_EXTENSIONS]
            if not images:
                self.warning("No images found in the folder.")
                return

            if not images:
                self.warning("No images found in the folder.")
                return

            for image_path in images:
                try:
                    self.info(f"Processing: {image_path}")
                    image_base64 = self.encode_image(image_path)

                    exif_data = self.extract_exif_data(image_path)
                    caption = self.generate_caption(image_base64, exif_data)

                    self.save_caption(image_path, caption)

                    # Upload to Qdrant
                    self.qdrant_db.insert_data([{
                        "path": str(image_path),
                        "caption": caption,
                        "exif": exif_data
                    }])
                    self.info(f"Uploaded {image_path} to Qdrant.")

                except Exception as e:
                    self.error(f"Error processing {image_path}: {e}")
                    continue

        except Exception as e:
            self.error(f"Error processing images in folder {image_folder}: {e}")